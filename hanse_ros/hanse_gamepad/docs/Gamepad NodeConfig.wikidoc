# Autogenerated param section. Do not hand edit.
param {
group.0 {
name=Dynamically Reconfigurable Parameters
desc=See the [[dynamic_reconfigure]] package for details on dynamically reconfigurable parameters.
0.name= ~publish_frequency
0.default= 1
0.type= int
0.desc=how often to send data to server Range: -2147483648 to 2147483647
1.name= ~gamepad_enable_button
1.default= 1
1.type= int
1.desc=button to enable hand control Range: -2147483648 to 2147483647
2.name= ~gamepad_disable_button
2.default= 1
2.type= int
2.desc=button to disable hand control Range: -2147483648 to 2147483647
3.name= ~joy_deadzone
3.default= 1.0
3.type= double
3.desc=min raw joystick value to be considered != 0 Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
4.name= ~linear_axis
4.default= 1
4.type= int
4.desc=axis for linear speed Range: -2147483648 to 2147483647
5.name= ~linear_scale
5.default= 1.0
5.type= double
5.desc=scale factor for linear speed Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
6.name= ~rotation_speed_mode
6.default= 1
6.type= int
6.desc=button to switch to rotation by stick Range: -2147483648 to 2147483647
7.name= ~angular_axis
7.default= 1
7.type= int
7.desc=axis for angular speed Range: -2147483648 to 2147483647
8.name= ~angular_scale
8.default= 1.0
8.type= double
8.desc=scale factor for angular speed Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
9.name= ~depth_up_button
9.default= 1
9.type= int
9.desc=button to go up Range: -2147483648 to 2147483647
10.name= ~depth_down_button
10.default= 1
10.type= int
10.desc=button to go down Range: -2147483648 to 2147483647
11.name= ~depth_delta
11.default= 1.0
11.type= double
11.desc=increment to go up/down in each step Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
12.name= ~orientation_mode
12.default= 1
12.type= int
12.desc=button to switch to rotation via increments Range: -2147483648 to 2147483647
13.name= ~orientation_left_button
13.default= 1
13.type= int
13.desc=button to go an increment to the left Range: -2147483648 to 2147483647
14.name= ~orientation_right_button
14.default= 1
14.type= int
14.desc=button to go an increment to the right Range: -2147483648 to 2147483647
15.name= ~orientation_delta
15.default= 1.0
15.type= double
15.desc=increment to turn left/right in each step Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
16.name= ~motor_switch_button
16.default= 1
16.type= int
16.desc=switch motors between ready and off Range: -2147483648 to 2147483647
17.name= ~pid_switch_button
17.default= 1
17.type= int
17.desc=switch pid's between all off and last on Range: -2147483648 to 2147483647
18.name= ~emergency_stop_button
18.default= 1
18.type= int
18.desc=button for emergency stop Range: -2147483648 to 2147483647
}
}
# End of autogenerated section. You may edit below.

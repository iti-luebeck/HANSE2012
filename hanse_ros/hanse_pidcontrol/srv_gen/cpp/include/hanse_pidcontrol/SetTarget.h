/* Auto-generated by genmsg_cpp for file /home/hanse/hanse-ros/hanse_ros/hanse_pidcontrol/srv/SetTarget.srv */
#ifndef HANSE_PIDCONTROL_SERVICE_SETTARGET_H
#define HANSE_PIDCONTROL_SERVICE_SETTARGET_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace hanse_pidcontrol
{
template <class ContainerAllocator>
struct SetTargetRequest_ {
  typedef SetTargetRequest_<ContainerAllocator> Type;

  SetTargetRequest_()
  : target(0.0)
  {
  }

  SetTargetRequest_(const ContainerAllocator& _alloc)
  : target(0.0)
  {
  }

  typedef double _target_type;
  double target;


  typedef boost::shared_ptr< ::hanse_pidcontrol::SetTargetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hanse_pidcontrol::SetTargetRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetTargetRequest
typedef  ::hanse_pidcontrol::SetTargetRequest_<std::allocator<void> > SetTargetRequest;

typedef boost::shared_ptr< ::hanse_pidcontrol::SetTargetRequest> SetTargetRequestPtr;
typedef boost::shared_ptr< ::hanse_pidcontrol::SetTargetRequest const> SetTargetRequestConstPtr;


template <class ContainerAllocator>
struct SetTargetResponse_ {
  typedef SetTargetResponse_<ContainerAllocator> Type;

  SetTargetResponse_()
  {
  }

  SetTargetResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::hanse_pidcontrol::SetTargetResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hanse_pidcontrol::SetTargetResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetTargetResponse
typedef  ::hanse_pidcontrol::SetTargetResponse_<std::allocator<void> > SetTargetResponse;

typedef boost::shared_ptr< ::hanse_pidcontrol::SetTargetResponse> SetTargetResponsePtr;
typedef boost::shared_ptr< ::hanse_pidcontrol::SetTargetResponse const> SetTargetResponseConstPtr;

struct SetTarget
{

typedef SetTargetRequest Request;
typedef SetTargetResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetTarget
} // namespace hanse_pidcontrol

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hanse_pidcontrol::SetTargetRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hanse_pidcontrol::SetTargetRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hanse_pidcontrol::SetTargetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c2f7134c29a3ad4daf56996f7fc77409";
  }

  static const char* value(const  ::hanse_pidcontrol::SetTargetRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc2f7134c29a3ad4dULL;
  static const uint64_t static_value2 = 0xaf56996f7fc77409ULL;
};

template<class ContainerAllocator>
struct DataType< ::hanse_pidcontrol::SetTargetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hanse_pidcontrol/SetTargetRequest";
  }

  static const char* value(const  ::hanse_pidcontrol::SetTargetRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hanse_pidcontrol::SetTargetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 target\n\
\n\
";
  }

  static const char* value(const  ::hanse_pidcontrol::SetTargetRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hanse_pidcontrol::SetTargetRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hanse_pidcontrol::SetTargetResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hanse_pidcontrol::SetTargetResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hanse_pidcontrol::SetTargetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::hanse_pidcontrol::SetTargetResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::hanse_pidcontrol::SetTargetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hanse_pidcontrol/SetTargetResponse";
  }

  static const char* value(const  ::hanse_pidcontrol::SetTargetResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hanse_pidcontrol::SetTargetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::hanse_pidcontrol::SetTargetResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hanse_pidcontrol::SetTargetResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hanse_pidcontrol::SetTargetRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.target);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetTargetRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hanse_pidcontrol::SetTargetResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetTargetResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hanse_pidcontrol::SetTarget> {
  static const char* value() 
  {
    return "c2f7134c29a3ad4daf56996f7fc77409";
  }

  static const char* value(const hanse_pidcontrol::SetTarget&) { return value(); } 
};

template<>
struct DataType<hanse_pidcontrol::SetTarget> {
  static const char* value() 
  {
    return "hanse_pidcontrol/SetTarget";
  }

  static const char* value(const hanse_pidcontrol::SetTarget&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hanse_pidcontrol::SetTargetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c2f7134c29a3ad4daf56996f7fc77409";
  }

  static const char* value(const hanse_pidcontrol::SetTargetRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hanse_pidcontrol::SetTargetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hanse_pidcontrol/SetTarget";
  }

  static const char* value(const hanse_pidcontrol::SetTargetRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hanse_pidcontrol::SetTargetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c2f7134c29a3ad4daf56996f7fc77409";
  }

  static const char* value(const hanse_pidcontrol::SetTargetResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hanse_pidcontrol::SetTargetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hanse_pidcontrol/SetTarget";
  }

  static const char* value(const hanse_pidcontrol::SetTargetResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HANSE_PIDCONTROL_SERVICE_SETTARGET_H

